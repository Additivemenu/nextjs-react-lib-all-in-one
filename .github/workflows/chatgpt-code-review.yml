name: ChatGPT Code Review

on:
  issue_comment:
    types: [created]

jobs:
  check_comment:
    runs-on: ubuntu-latest
    # Make sure we're only running on PR comments with our trigger phrase
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '@chatgpt-code-review') }}
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      custom_instructions: ${{ steps.check.outputs.custom_instructions }}
    steps:
      - id: check
        run: |
          PR_NUMBER="${{ github.event.issue.number }}"
          COMMENT="${{ github.event.comment.body }}"
          
          if [[ "$COMMENT" == *"@chatgpt-code-review"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            
            # Extract any text after the trigger as custom instructions
            CUSTOM_INSTRUCTIONS=$(echo "$COMMENT" | sed -n 's/.*@chatgpt-code-review\s*\(.*\)/\1/p')
            # Escape newlines for GitHub Actions
            CUSTOM_INSTRUCTIONS="${CUSTOM_INSTRUCTIONS//'%'/'%25'}"
            CUSTOM_INSTRUCTIONS="${CUSTOM_INSTRUCTIONS//$'\n'/'%0A'}"
            CUSTOM_INSTRUCTIONS="${CUSTOM_INSTRUCTIONS//$'\r'/'%0D'}"
            echo "custom_instructions=$CUSTOM_INSTRUCTIONS" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  code-review:
    needs: check_comment
    if: ${{ needs.check_comment.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Add initial reaction
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add a üëÄ reaction to indicate the request has been received
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch PR data
        id: pr-data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check_comment.outputs.pr_number }}
            });
            
            // Output the necessary data
            core.setOutput('base_sha', pr.data.base.sha);
            core.setOutput('head_sha', pr.data.head.sha);
      
      - name: Fetch PR branch
        run: |
          git fetch origin pull/${{ needs.check_comment.outputs.pr_number }}/head:pr-${{ needs.check_comment.outputs.pr_number }}
          git checkout pr-${{ needs.check_comment.outputs.pr_number }}

      - name: Get changed files
        id: changed-files
        run: |
          # Get both changed and added files between the base and head SHAs
          # The --diff-filter=ACMRT ensures we get added (A), copied (C), modified (M), renamed (R), and type-changed (T) files
          echo "files=$(git diff --name-only --diff-filter=ACMRT ${{ steps.pr-data.outputs.base_sha }} ${{ steps.pr-data.outputs.head_sha }} | grep -E '\\.(js|ts|jsx|tsx|py|java|c|cpp|go|rb|php|cs)$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
          # Debug output to see what files were detected
          echo "Detected changed files:"
          git diff --name-only --diff-filter=ACMRT ${{ steps.pr-data.outputs.base_sha }} ${{ steps.pr-data.outputs.head_sha }} | grep -E '\\.(js|ts|jsx|tsx|py|java|c|cpp|go|rb|php|cs)$'

      - name: Get diff content
        id: diff-content
        run: |
          DIFF_TEXT=""
          for file in ${{ steps.changed-files.outputs.files }}; do
            if [ -f "$file" ]; then
              echo "Processing $file"
              FILE_DIFF=$(git diff ${{ steps.pr-data.outputs.base_sha }} ${{ steps.pr-data.outputs.head_sha }} -- "$file")
              DIFF_TEXT="$DIFF_TEXT
              
              File: $file
              \`\`\`
              $FILE_DIFF
              \`\`\`
              "
            fi
          done
          
          echo "::set-output name=diff::$DIFF_TEXT"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install OpenAI SDK
        run: npm install openai@^4.0.0

      - name: Run ChatGPT code review
        id: review
        if: steps.changed-files.outputs.files != ''
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DIFF_TEXT: ${{ steps.diff-content.outputs.diff }}
          CUSTOM_INSTRUCTIONS: ${{ needs.check_comment.outputs.custom_instructions }}
        with:
          script: |
            const { OpenAI } = require('openai');
            
            const openai = new OpenAI({
              apiKey: process.env.OPENAI_API_KEY,
            });
            
            const prompt = `You are a code reviewer. You will be given a Git diff of code changes.
            Your task is to review the changes and provide constructive feedback.
            
            Focus on:
            1. Code quality and best practices
            2. Potential bugs or edge cases
            3. Security vulnerabilities
            4. Performance issues
            5. Maintainability and readability
            
            ${process.env.CUSTOM_INSTRUCTIONS}
            
            For each issue you find, provide:
            - A clear description of the issue
            - The file and line number where it occurs
            - A suggestion for how to fix it
            - If applicable, an explanation of why your suggestion is better
            
            Be specific and actionable. Provide code examples when helpful.
            If the code looks good, acknowledge good practices you observe.
            Be courteous and professional.
            
            Format your review with markdown for better readability.
            
            Here is the diff:
            ${process.env.DIFF_TEXT}`;
            
            try {
              console.log('Sending request to OpenAI API...');
              const response = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.2,
                max_tokens: 2048
              });
              
              const reviewContent = response.choices[0].message.content;
              console.log('Successfully received response from OpenAI API');
              
              // Create PR comment with the review
              await github.rest.issues.createComment({
                issue_number: ${{ needs.check_comment.outputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ü§ñ ChatGPT Code Review\n\n${reviewContent}\n\n---\n*This review was generated automatically by ChatGPT in response to @${context.payload.comment.user.login}'s request.*`
              });
              
              // Add success reaction to the trigger comment
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '+1'
              });
              
              return { success: true };
            } catch (error) {
              console.error('Error calling OpenAI API:', error);
              
              // Add failure reaction to the trigger comment
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '-1'
              });
              
              // Post error message
              await github.rest.issues.createComment({
                issue_number: ${{ needs.check_comment.outputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "‚ö†Ô∏è Sorry, I couldn't complete the code review. An error occurred while processing the request."
              });
              
              throw error;
            }